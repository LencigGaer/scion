// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package xdp

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadBr returns the embedded CollectionSpec for br.
func loadBr() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BrBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load br: %w", err)
	}

	return spec, err
}

// loadBrObjects loads br and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*brObjects
//	*brPrograms
//	*brMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBrObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBr()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// brSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type brSpecs struct {
	brProgramSpecs
	brMapSpecs
}

// brSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type brProgramSpecs struct {
	BorderRouter *ebpf.ProgramSpec `ebpf:"border_router"`
}

// brMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type brMapSpecs struct {
	AES_SBox      *ebpf.MapSpec `ebpf:"AES_SBox"`
	DebugRingbuf  *ebpf.MapSpec `ebpf:"debug_ringbuf"`
	EgressMap     *ebpf.MapSpec `ebpf:"egress_map"`
	IngressMap    *ebpf.MapSpec `ebpf:"ingress_map"`
	IntIfaceMap   *ebpf.MapSpec `ebpf:"int_iface_map"`
	MacKeyMap     *ebpf.MapSpec `ebpf:"mac_key_map"`
	PortStatsMap  *ebpf.MapSpec `ebpf:"port_stats_map"`
	ScratchpadMap *ebpf.MapSpec `ebpf:"scratchpad_map"`
	TxPortMap     *ebpf.MapSpec `ebpf:"tx_port_map"`
}

// brObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBrObjects or ebpf.CollectionSpec.LoadAndAssign.
type brObjects struct {
	brPrograms
	brMaps
}

func (o *brObjects) Close() error {
	return _BrClose(
		&o.brPrograms,
		&o.brMaps,
	)
}

// brMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBrObjects or ebpf.CollectionSpec.LoadAndAssign.
type brMaps struct {
	AES_SBox      *ebpf.Map `ebpf:"AES_SBox"`
	DebugRingbuf  *ebpf.Map `ebpf:"debug_ringbuf"`
	EgressMap     *ebpf.Map `ebpf:"egress_map"`
	IngressMap    *ebpf.Map `ebpf:"ingress_map"`
	IntIfaceMap   *ebpf.Map `ebpf:"int_iface_map"`
	MacKeyMap     *ebpf.Map `ebpf:"mac_key_map"`
	PortStatsMap  *ebpf.Map `ebpf:"port_stats_map"`
	ScratchpadMap *ebpf.Map `ebpf:"scratchpad_map"`
	TxPortMap     *ebpf.Map `ebpf:"tx_port_map"`
}

func (m *brMaps) Close() error {
	return _BrClose(
		m.AES_SBox,
		m.DebugRingbuf,
		m.EgressMap,
		m.IngressMap,
		m.IntIfaceMap,
		m.MacKeyMap,
		m.PortStatsMap,
		m.ScratchpadMap,
		m.TxPortMap,
	)
}

// brPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBrObjects or ebpf.CollectionSpec.LoadAndAssign.
type brPrograms struct {
	BorderRouter *ebpf.Program `ebpf:"border_router"`
}

func (p *brPrograms) Close() error {
	return _BrClose(
		p.BorderRouter,
	)
}

func _BrClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed br_bpfeb.o
var _BrBytes []byte
